## Intro

The Casting Agency API supports the allowed users to query the database for movies and actors. There are three different user roles and permissions:

Casting assistant: Can view actors and movies.
Casting director: Can view, add, modify, or delete actors and can view and modify movies.
Executive producer: All permissions of casting director and Add or delete a movie from the database.

## Running the API
API endpoints can be accessed via https://castingsa.herokuapp.com/

Auth0 information for endpoints that require authentication can be found in setup.sh

## API Documentation

Endpoints GET '/actors' GET '/movies' POST '/add-actor' POST '/add-movie' PATCH '/actors/<int:actor_id>' PATCH '/movies/<int:movie_id>' DELETE '/actors/<int:actor_id>' DELETE '/movies/<int:movie_id>'

# GET '/actors'

Fetches a JSON object with a list of actors in the database.
Request Arguments: None
Returns: An object with a single key, actors, that contains multiple objects with a series of string key pairs.

# GET '/movies'

Fetches a JSON object with a list of movies in the database.
Request Arguments: None
Returns: An object with a single key, movies, that contains multiple objects with a series of string key pairs.

# POST '/actors/create'

Posts a new actor to the database, including the name, age, gender, and actor ID, which is automatically assigned upon insertion.
Request Arguments: Requires three string arguments: name, age, gender.
Returns: An actor object with the age, gender, actor ID, and name.

# POST '/movies/create'

Posts a new movie to the database, including the title, release, and movie ID, which is automatically assigned upon insertion.
Request Arguments: Requires two string arguments: title, release.
Returns: A movie object with the movie ID, release, and title.

# PATCH '/actors/patch/<int:actor_id>'

Patches an existing actor in the database.
Request arguments: Actor ID, included as a parameter following a forward slash (/), and the key to be updated passed into the body as a JSON object. For example, to update the age for '/actors/6'
Returns: An actor object with the full body of the specified actor ID.

# PATCH '/movies/patch/<int:movie_id>'

Patches an existing movie in the database.
Request arguments: Movie ID, included as a parameter following a forward slash (/), and the key to be updated, passed into the body as a JSON object. For example, to update the age for '/movies/5'
Returns: A movie object with the full body of the specified movie ID.

# DELETE '/actors/delete/<int:actor_id>'

Deletes an actor in the database via the DELETE method and using the actor id.
Request argument: Actor id, included as a parameter following a forward slash (/).
Returns: ID for the deleted question and status code of the request.

# DELETE '/movies/delete/<int:movie_id>'

Deletes a movie in the database via the DELETE method and using the movie id.
Request argument: Movie id, included as a parameter following a forward slash (/).
Returns: ID for the deleted question and status code of the request.
